"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import example_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ExampleServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ExampleGetHandler: grpc.UnaryUnaryMultiCallable[
        example_pb2.ExampleGetRequest,
        example_pb2.ExampleGetResponse,
    ]
    ExamplePostHandler: grpc.UnaryUnaryMultiCallable[
        example_pb2.ExamplePostRequest,
        example_pb2.ExamplePostResponse,
    ]

class ExampleServiceAsyncStub:
    ExampleGetHandler: grpc.aio.UnaryUnaryMultiCallable[
        example_pb2.ExampleGetRequest,
        example_pb2.ExampleGetResponse,
    ]
    ExamplePostHandler: grpc.aio.UnaryUnaryMultiCallable[
        example_pb2.ExamplePostRequest,
        example_pb2.ExamplePostResponse,
    ]

class ExampleServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ExampleGetHandler(
        self,
        request: example_pb2.ExampleGetRequest,
        context: _ServicerContext,
    ) -> typing.Union[example_pb2.ExampleGetResponse, collections.abc.Awaitable[example_pb2.ExampleGetResponse]]: ...
    @abc.abstractmethod
    def ExamplePostHandler(
        self,
        request: example_pb2.ExamplePostRequest,
        context: _ServicerContext,
    ) -> typing.Union[example_pb2.ExamplePostResponse, collections.abc.Awaitable[example_pb2.ExamplePostResponse]]: ...

def add_ExampleServiceServicer_to_server(servicer: ExampleServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
